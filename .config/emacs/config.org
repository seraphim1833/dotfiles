ICXC + NIKA

* Funciones generales
** Gestor de paquetes
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(
			   ;;("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Inicialización
#+begin_src emacs-lisp
  (setq inhibit-startup-echo-area-message "tychoish")
  (setq inhibit-startup-message 't)

  (setq inhibit-startup-message t)
  (setq initial-major-mode 'org-mode)
#+end_src

** Historial de archivos
#+begin_src emacs-lisp
  (recentf-mode 1) ;; Guardar historial de archivos
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files) ;; Atajo para abrir archivos recientes
#+end_src

** Manipulación automática de texto
#+begin_src emacs-lisp
  (electric-pair-mode t) ;; Cerrar automáticamente los paréntesis etc
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dir '("~/.config/emacs/snippets"))
    (yas-global-mode 1))


#+end_src
* Apariencia
** Tema
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (use-package gruvbox-theme)
  (load-theme 'gruvbox-light-medium :no-confirm)
#+end_src

** Tipografías por defecto, etc.
#+begin_src emacs-lisp
  (use-package nerd-icons)
  (use-package all-the-icons)

  (set-face-attribute 'default nil
		      :family "Iosevka Fixed Curly Slab"
		      :weight 'medium
		      :height 180)
  (set-face-attribute 'fixed-pitch nil
		      :family "Iosevka Fixed Curly Slab"
		      :weight 'medium
		      :height 180)
  (set-face-attribute 'variable-pitch nil
		      :family "Iosevka Fixed Curly Slab"
		      :weight 'medium
		      :height 220)
  ;; (set-face-attribute 'variable-pitch nil
  ;; 		    :family "EB Garamond"
  ;; 		    :height 1.5)

  (set-face-attribute 'mode-line nil
		      :family "Iosevka Fixed Curly Slab"
		      :weight 'medium
		      :height 180)

#+end_src

** Modeline
*** Doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    ;;:custom ((doom-modeline-height 15))
    )
  (setq doom-modeline-height 11)
  (setq doom-modeline-buffer-modification-icon nil)
  (setq doom-modeline-time-icon t)
  (setq doom-modeline-enable-word-count t)
  (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
  (setq mode-line-right-align-edge 'right-fringe)
  (line-number-mode 0)
#+end_src

*** Nyan-mode
#+begin_src emacs-lisp

  (use-package nyan-mode)
  (setq nyan-animate-nyancat t)
  (setq nyan-wavy-trail t)
  (nyan-mode)
  ;; (setq nyan-cat-image
  ;;       (create-image nyan-cat-face-image 'xpm nil :scale 1 :ascent 'center))
  ;; (setq nyan-animation-frames
  ;;       (mapcar
  ;;        (lambda (id)
  ;;          (create-image (concat nyan-directory (format "img/nyan-frame-%d.xpm" id))
  ;;                        'xpm nil :scale 1 :ascent 100))
  ;;        '(1 2 3 4 5 6)))
#+end_src

** Interfaz
#+begin_src emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1)
    (setq server-client-instructions nil)
    (setq frame-inhibit-implied-resize t)
  ;;(setq-default cursor-type '(bar . 2))

  ;; (use-package dashboard
  ;; :ensure t
  ;; :config
  ;; (dashboard-setup-startup-hook))
#+end_src

* Org-mode
** Modo centrado
#+begin_src emacs-lisp
      (use-package visual-fill-column
	:hook (org-mode . org-appear-mode)
	:config
	(setq-default visual-fill-column-width 100))
      (setq-default visual-fill-column-center-text t)
      (setq visual-fill-column-enable-sensible-window-split t)
      (use-package adaptive-wrap
	:hook (org-mode . org-appear-mode))
#+end_src

** Miscelanea
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

** Estilo de los encabezados
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-appear-mode))
#+end_src

** Mejorar visualización de ciertas cosas
#+begin_src emacs-lisp
  (setq-default org-pretty-entities t
		org-use-sub-superscripts "{}"
		org-startup-with-inline-images t
		org-image-actual-width '(300)
		)
  ;;(font-lock-add-keywords 'org-mode
  ;;'(("^ *\\([-]\\) "
  ;;(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (use-package org-appear
    :hook (org-mode . org-appear-mode))
  (setq org-ellipsis " ☜")
#+end_src

** Ajustes tipográficos
#+begin_src emacs-lisp
  (use-package org-faces
    :hook (org-mode . org-appear-mode)
    :ensure nil
    :custom-face
    (org-checkbox ((nil (:inherit fixed-pitch))))
    (org-block ((nil (:inherit (fixed-pitch) :height 0.8))))
    (org-code ((nil (:inherit (shadow fixed-pitch)))))
    (org-indent ((nil (:inherit (org-hide fixed-pitch)))))
    (org-meta-line ((nil (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-property-value ((nil (:inherit fixed-pitch))))
    (org-special-keyword ((nil (:inherit (font-lock-comment-face fixed-pitch)))))
    (org-table ((nil (:inherit fixed-pitch :height 0.8)))) ;;:foreground "#83a598"
    (org-tag ((nil (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
    (org-verbatim ((nil (:inherit (shadow fixed-pitch)))))
    (org-block-begin-line ((nil (:inherit fixed-pitch :height 0.8))))
    (org-block-end-line ((nil (:inherit fixed-pitch :height 0.8))))
    (org-list-dt ((nil (:inhetir fixed-pitch))))

    ;; ;; (org-level-8 ((nil (:family "Cormorant SC"))))
    ;; (org-level-7 ((nil (:family "Cormorant SC"))))
    ;; (org-level-6 ((nil (:family "Cormorant SC"))))
    ;; (org-level-5 ((nil (:family "Cormorant SC"))))
    ;; (org-level-4 ((nil (:family "Cormorant SC"))))
    ;;(org-level-3 ((nil (:family "Cormorant SC" :height 1.1))))
    ;; (org-level-2 ((nil (:family "Cormorant SC" :height 1.25))))
    ;; (org-level-1 ((nil (:family "Cormorant SC" :weight black :height 1.7))))
    ;; (org-document-title ((nil (:family "Cormorant SC" :weight black :height 2.0 :underline nil))))
    ;; (org-document-author ((nil (:family "Cormorant SC" :weight black :underline nil))))
    (org-level-3 ((nil (:weight black :height 1.1))))
    (org-level-2 ((nil (:weight black :height 1.25))))
    (org-level-1 ((nil (:weight black :weight black :height 1.7))))
    (org-document-title ((nil (:weight black :height 2.0 :underline nil))))
    (org-document-author ((nil (:weight black :underline nil))))
    )
#+end_src

** Org-reveal
#+begin_src emacs-lisp
  (use-package ox-reveal)
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
#+end_src

** Hooks
#+begin_src emacs-lisp
;;  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode)
  (add-hook 'org-mode-hook 'visual-fill-column-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
#+end_src

* LaTeX
** AucTeX
#+begin_src emacs-lisp
  (use-package auctex
    :ensure t
    :defer t)
#+end_src


